
-- Creating the Users table
CREATE TABLE Users (
    user_id INT PRIMARY KEY,
    join_date DATE NOT NULL,
    favorite_brand VARCHAR(100)
);

-- Creating the Items table
CREATE TABLE Items (
    item_id INT PRIMARY KEY,
    item_brand VARCHAR(100) NOT NULL
);

-- Creating the Orders table with foreign keys
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    order_date DATE NOT NULL,
    item_id INT,
    buyer_id INT,
    seller_id INT,
    CONSTRAINT FK_Orders_Items FOREIGN KEY (item_id) REFERENCES Items(item_id) ON DELETE CASCADE,
    CONSTRAINT FK_Orders_Buyer FOREIGN KEY (buyer_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    CONSTRAINT FK_Orders_Seller FOREIGN KEY (seller_id) REFERENCES Users(user_id) ON DELETE CASCADE
);

-- Inserting data into the Users table
INSERT INTO Users (user_id, join_date, favorite_brand) VALUES
(1, '2019-01-01', 'Lenovo'),
(2, '2019-02-09', 'Samsung'),
(3, '2019-01-19', 'LG'),
(4, '2019-05-21', 'HP');

-- Inserting data into the Items table
INSERT INTO Items (item_id, item_brand) VALUES
(1, 'Samsung'),
(2, 'Lenovo'),
(3, 'LG'),
(4, 'HP');

-- Inserting data into the Orders table
INSERT INTO Orders (order_id, order_date, item_id, buyer_id, seller_id) VALUES
(1, '2019-08-01', 4, 1, 2),
(2, '2019-08-02', 2, 1, 3),
(3, '2019-08-03', 3, 2, 3),
(4, '2019-08-04', 1, 4, 2),
(5, '2019-08-04', 1, 3, 4),
(6, '2019-08-05', 2, 2, 4);
WITH cte AS (
    SELECT 
        u.user_id,
        u.favorite_brand,
        o.order_date,
        i.item_brand,
        DENSE_RANK() OVER (PARTITION BY u.user_id ORDER BY o.order_date) AS rnk,
        COUNT(*) OVER (PARTITION BY u.user_id) AS count_items
    FROM Users u
    LEFT JOIN Orders o ON u.user_id = o.seller_id
    LEFT JOIN Items i ON o.item_id = i.item_id
),
cte2 AS (
    SELECT 
        user_id AS seller_id,
        CASE 
            WHEN count_items < 2 THEN 'no'
            WHEN rnk >= 2 AND item_brand = favorite_brand THEN 'yes'
            WHEN rnk >= 2 AND item_brand <> favorite_brand THEN 'no'
            ELSE NULL
        END AS second_item_fav_brand
    FROM cte
   
)

SELECT *
FROM cte2
WHERE second_item_fav_brand IS NOT NULL;


